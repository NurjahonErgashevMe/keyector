import os
import asyncio
import logging
import re
from telethon import TelegramClient, events
from telethon.tl.types import Channel, User
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
import html  # –î–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = int(os.getenv('API_ID'))
API_HASH = os.getenv('API_HASH')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
BOT_TOKEN = os.getenv('BOT_TOKEN')
SESSION_NAME = 'userbot_session'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
userbot = TelegramClient(SESSION_NAME, API_ID, API_HASH)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
tracked_data = {
    "chats": {},  # {chat_id: {"title": "", "username": ""}}
    "keywords": {},  # {chat_id: set(["keyword1", "keyword2"])}
}

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def normalize_chat_id(chat_id: int) -> int:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ID —á–∞—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if str(chat_id).startswith('-100'):
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '-100' –∏–∑ chat_id
        return int(str(chat_id)[4:])
    return chat_id


async def format_message_link(chat_id: int, message_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    chat_info = tracked_data["chats"].get(chat_id, {})
    username = chat_info.get("username", "")
    
    if username:
        return f"https://t.me/{username}/{message_id}"
    else:
        # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –±–µ–∑ username
        return f"https://t.me/c/{abs(chat_id)}/{message_id}" if chat_id < 0 else f"https://t.me/c/{chat_id}/{message_id}"

def format_user_link(user) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MarkdownV2"""
    user_id = user.id
    first_name = getattr(user, 'first_name', '') or getattr(user, 'title', '') or "Unknown"
    return f"[{escape_markdown_v2(first_name)}](tg://user?id={user_id})"

def format_user_html(user) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ HTML"""
    user_id = user.id
    first_name = getattr(user, 'first_name', '') or getattr(user, 'title', '') or "Unknown"
    return f'<a href="tg://user?id={user_id}">{html.escape(first_name)}</a>'

# ====================== AIogram Handlers (–ë–æ—Ç) ====================== #
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
        
    welcome_text = (
        "üîç *–ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ Telegram*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add\\_chat \\- –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/remove\\_chat \\- –£–¥–∞–ª–∏—Ç—å —á–∞—Ç\n"
        "/add\\_keywords \\- –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        "/remove\\_keywords \\- –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        "/list \\- –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —á–∞—Ç—ã\n"
        "/help \\- –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )
    await message.answer(welcome_text, parse_mode=ParseMode.MARKDOWN_V2)

@dp.message(Command("add_chat"))
async def cmd_add_chat(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç: /add_chat @username", parse_mode=ParseMode.MARKDOWN_V2)
        return

    try:
        ref = args[1].strip()
        entity = await userbot.get_entity(ref)
        
        if not isinstance(entity, Channel):
            await message.answer("–≠—Ç–æ –Ω–µ —á–∞—Ç/–∫–∞–Ω–∞–ª!")
            return
            
        chat_id = entity.id
        title = entity.title
        username = getattr(entity, 'username', None) or ""
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID —á–∞—Ç–∞
        chat_id = normalize_chat_id(chat_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ
        tracked_data["chats"][chat_id] = {
            "title": title,
            "username": username
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if chat_id not in tracked_data["keywords"]:
            tracked_data["keywords"][chat_id] = set()
        
        await message.answer(
            f"‚úÖ –ß–∞—Ç *{escape_markdown_v2(title)}* –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\.\n"
            f"ID: `{chat_id}`\n"
            f"Username: @{username if username else 'N/A'}",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")

@dp.message(Command("remove_chat"))
async def cmd_remove_chat(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞: /remove_chat 123456789", parse_mode=ParseMode.MARKDOWN_V2)
        return

    try:
        chat_id = int(args[1])
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID —á–∞—Ç–∞
        chat_id = normalize_chat_id(chat_id)
        
        if chat_id in tracked_data["chats"]:
            title = tracked_data["chats"][chat_id]["title"]
            del tracked_data["chats"][chat_id]
            if chat_id in tracked_data["keywords"]:
                del tracked_data["keywords"][chat_id]
            await message.answer(f"‚ùå –ß–∞—Ç *{escape_markdown_v2(title)}* —É–¥–∞–ª–µ–Ω", 
                               parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await message.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")

@dp.message(Command("add_keywords"))
async def cmd_add_keywords(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        usage_text = escape_markdown_v2("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_keywords <chat_id> <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é>")
        await message.answer(usage_text, parse_mode=ParseMode.MARKDOWN_V2)
        return

    try:
        chat_id = int(args[1])
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID —á–∞—Ç–∞
        chat_id = normalize_chat_id(chat_id)
        keywords = [k.strip().lower() for k in args[2].split(",") if k.strip()]
        
        if chat_id not in tracked_data["keywords"]:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á–∞—Ç —Å –ø–æ–º–æ—â—å—é /add_chat")
            return
            
        tracked_data["keywords"][chat_id].update(keywords)
        count = len(tracked_data["keywords"][chat_id])
        
        await message.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n"
            f"–í—Å–µ–≥–æ —Å–ª–æ–≤ –¥–ª—è —á–∞—Ç–∞: {count}",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")

@dp.message(Command("remove_keywords"))
async def cmd_remove_keywords(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        usage_text = escape_markdown_v2("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_keywords <chat_id> <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é>")
        await message.answer(usage_text, parse_mode=ParseMode.MARKDOWN_V2)
        return

    try:
        chat_id = int(args[1])
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID —á–∞—Ç–∞
        chat_id = normalize_chat_id(chat_id)
        keywords = [k.strip().lower() for k in args[2].split(",") if k.strip()]
        
        if chat_id not in tracked_data["keywords"]:
            await message.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        removed = 0
        for kw in keywords:
            if kw in tracked_data["keywords"][chat_id]:
                tracked_data["keywords"][chat_id].remove(kw)
                removed += 1
                
        await message.answer(f"–£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {removed}")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")

@dp.message(Command("list"))
async def cmd_list(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    if not tracked_data["chats"]:
        await message.answer("–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤")
        return

    response = "üìã *–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —á–∞—Ç—ã:*\n\n"
    for chat_id, chat_info in tracked_data["chats"].items():
        keywords = tracked_data["keywords"].get(chat_id, set())
        response += (
            f"‚Ä¢ *{escape_markdown_v2(chat_info['title'])}* \n"
            f"ID: `{chat_id}` \n"
            f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords) if keywords else '–Ω–µ—Ç'}\n\n"
        )
    
    await message.answer(response, parse_mode=ParseMode.MARKDOWN_V2)

# ====================== Telethon Handler (Userbot) ====================== #
@userbot.on(events.NewMessage)
async def handle_new_message(event):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–∞—Ö"""
    original_chat_id = event.chat_id
    chat_id = normalize_chat_id(original_chat_id)
    logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID: {original_chat_id}, –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID: {chat_id}")
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –Ω–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤
    if chat_id not in tracked_data["chats"]:
        logger.info(f"–ß–∞—Ç {chat_id} –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
        return
    
    logger.info(f"–ß–∞—Ç {chat_id} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    if not event.message.text:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    keywords = tracked_data["keywords"].get(chat_id, set())
    text_lower = event.message.text.lower()
    
    logger.info(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {keywords}")
    logger.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {text_lower[:100]}{'...' if len(text_lower) > 100 else ''}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    found_keywords = []
    for keyword in keywords:
        if keyword in text_lower:
            found_keywords.append(keyword)
    
    if not found_keywords:
        logger.info("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        return
    
    logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat_info = tracked_data["chats"][chat_id]
        chat_title = chat_info["title"]
        chat_username = chat_info.get("username", "")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
        message_link = await format_message_link(chat_id, event.message.id)
        chat_link = f"https://t.me/{chat_username}" if chat_username else ""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
        sender = await event.get_sender()
        sender_name = getattr(sender, 'first_name', '') or getattr(sender, 'title', '') or "Unknown"
        
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º tg://user?id —Å—Å—ã–ª–∫—É
        author_md = f"[{escape_markdown_v2(sender_name)}](tg://user?id={sender.id})"
        author_html = f'<a href="tg://user?id={sender.id}">{html.escape(sender_name)}</a>'
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é", url=message_link)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ MarkdownV2 –∏ HTML
        notification_md = (
            f"üîî *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\!*\n\n"
            f"*–ß–∞—Ç:* [{escape_markdown_v2(chat_title)}]({chat_link if chat_link else '#'})\n"
            f"*–ê–≤—Ç–æ—Ä:* {author_md}\n"
            f"*–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:* {', '.join(found_keywords)}\n\n"
            f"*–°–æ–æ–±—â–µ–Ω–∏–µ:*\n`{escape_markdown_v2(event.message.text[:800])}`"
        )
        
        notification_html = (
            f"<b>üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ!</b>\n\n"
            f"<b>–ß–∞—Ç:</b> <a href='{chat_link}'>{html.escape(chat_title)}</a>\n"
            f"<b>–ê–≤—Ç–æ—Ä:</b> {author_html}\n"
            f"<b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {', '.join(found_keywords)}\n\n"
            f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<code>{html.escape(event.message.text[:800])}</code>"
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ MarkdownV2, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML
        try:
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=notification_md,
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=builder.as_markup(),
                disable_web_page_preview=True
            )
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ MarkdownV2")
        except Exception as md_error:
            logger.warning(f"–û—à–∏–±–∫–∞ MarkdownV2: {md_error}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ HTML")
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=notification_html,
                parse_mode=ParseMode.HTML,
                reply_markup=builder.as_markup(),
                disable_web_page_preview=True
            )
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ HTML")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}", exc_info=True)

# ====================== Main Function ====================== #
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    await userbot.start()
    logger.info("Userbot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    
    await dp.start_polling(bot)
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())
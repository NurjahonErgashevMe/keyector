import os
import asyncio
import logging
import re
import aiosqlite
from telethon import TelegramClient, events
from telethon.tl.types import Channel
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
import html
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

load_dotenv()



# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

API_ID = int(os.getenv('API_ID'))

API_HASH = os.getenv('API_HASH')

ADMIN_ID = int(os.getenv('ADMIN_ID'))

BOT_TOKEN = os.getenv('BOT_TOKEN')

SESSION_NAME = 'userbot_session'

DB_NAME = 'tracker.db'

BATCH_SIZE = 100  # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

logging.basicConfig(

    level=logging.INFO,

    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'

)

logger = logging.getLogger(__name__)



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤

userbot = TelegramClient(SESSION_NAME, API_ID, API_HASH)

bot = Bot(token=BOT_TOKEN)

dp = Dispatcher()



# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

tracked_chats = {}  # {chat_id: {"title": "", "username": "", "pattern": regex}}

pending_messages = []  # –ë—É—Ñ–µ—Ä –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π



def normalize_chat_id(chat_id: int) -> int:

    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ID —á–∞—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""

    if str(chat_id).startswith('-100'):

        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '-100' –∏–∑ chat_id

        return int(str(chat_id)[4:])

    return chat_id



async def init_db():

    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    async with aiosqlite.connect(DB_NAME) as db:

        await db.execute('''

            CREATE TABLE IF NOT EXISTS chats (

                id INTEGER PRIMARY KEY,

                title TEXT NOT NULL,

                username TEXT

            )

        ''')

        await db.execute('''

            CREATE TABLE IF NOT EXISTS keywords (

                id INTEGER PRIMARY KEY AUTOINCREMENT,

                chat_id INTEGER NOT NULL,

                keyword TEXT NOT NULL,

                FOREIGN KEY(chat_id) REFERENCES chats(id) ON DELETE CASCADE

            )

        ''')

        await db.execute('CREATE INDEX IF NOT EXISTS idx_chat_id ON keywords(chat_id)')

        await db.commit()



async def load_tracked_data():

    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –≤ –ø–∞–º—è—Ç—å"""

    async with aiosqlite.connect(DB_NAME) as db:

        # –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤

        cursor = await db.execute('SELECT id, title, username FROM chats')

        chat_rows = await cursor.fetchall()

        for row in chat_rows:

            chat_id, title, username = row

            tracked_chats[chat_id] = {

                "title": title,

                "username": username,

                "pattern": None

            }

        

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –∫–æ–º–ø–∏–ª—è—Ü–∏—è regex

        cursor = await db.execute('SELECT chat_id, GROUP_CONCAT(keyword) FROM keywords GROUP BY chat_id')

        keyword_rows = await cursor.fetchall()

        for chat_id, keywords_str in keyword_rows:

            if chat_id in tracked_chats and keywords_str:

                try:

                    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–º–ø–∏–ª—è—Ü–∏—è regex

                    escaped_keywords = [re.escape(kw.strip().lower()) for kw in keywords_str.split(',')]

                    pattern_str = r'\b(' + '|'.join(escaped_keywords) + r')\b'

                    tracked_chats[chat_id]["pattern"] = re.compile(pattern_str, re.IGNORECASE)

                    logger.info(f"–°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω regex –¥–ª—è —á–∞—Ç–∞ {chat_id}: {pattern_str}")

                except Exception as e:

                    logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ regex –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")



async def add_chat(chat_id: int, title: str, username: str = ""):

    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ –±–∞–∑—É"""

    normalized_id = normalize_chat_id(chat_id)

    async with aiosqlite.connect(DB_NAME) as db:

        await db.execute(

            'INSERT OR IGNORE INTO chats (id, title, username) VALUES (?, ?, ?)',

            (normalized_id, title, username)

        )

        await db.commit()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞

    tracked_chats[normalized_id] = {"title": title, "username": username, "pattern": None}



async def remove_chat(chat_id: int):

    """–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã"""

    normalized_id = normalize_chat_id(chat_id)

    async with aiosqlite.connect(DB_NAME) as db:

        await db.execute('DELETE FROM chats WHERE id = ?', (normalized_id,))

        await db.commit()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞

    if normalized_id in tracked_chats:

        del tracked_chats[normalized_id]



async def add_keywords(chat_id: int, keywords: list):

    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""

    normalized_id = normalize_chat_id(chat_id)

    async with aiosqlite.connect(DB_NAME) as db:

        # –ü–∞–∫–µ—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞

        data = [(normalized_id, kw.strip().lower()) for kw in keywords]

        await db.executemany(

            'INSERT OR IGNORE INTO keywords (chat_id, keyword) VALUES (?, ?)',

            data

        )

        await db.commit()

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ regex

    await reload_regex(normalized_id)



async def remove_keywords(chat_id: int, keywords: list):

    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""

    normalized_id = normalize_chat_id(chat_id)

    async with aiosqlite.connect(DB_NAME) as db:

        placeholders = ','.join(['?'] * len(keywords))

        await db.execute(

            f'DELETE FROM keywords WHERE chat_id = ? AND keyword IN ({placeholders})',

            (normalized_id, *[kw.strip().lower() for kw in keywords])

        )

        await db.commit()
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ regex
    await reload_regex(normalized_id)

async def reload_regex(chat_id: int):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ regex –¥–ª—è —á–∞—Ç–∞"""
    normalized_id = normalize_chat_id(chat_id)
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute(
            'SELECT GROUP_CONCAT(keyword) FROM keywords WHERE chat_id = ?',
            (normalized_id,)
        )
        result = await cursor.fetchone()
        keywords_str = result[0] if result else None
        
        if keywords_str and normalized_id in tracked_chats:
            try:
                escaped_keywords = [re.escape(kw.strip().lower()) for kw in keywords_str.split(',')]
                pattern_str = r'\b(' + '|'.join(escaped_keywords) + r')\b'
                tracked_chats[normalized_id]["pattern"] = re.compile(pattern_str, re.IGNORECASE)
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω regex –¥–ª—è —á–∞—Ç–∞ {normalized_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è regex: {e}")
        elif normalized_id in tracked_chats:
            tracked_chats[normalized_id]["pattern"] = None

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

async def format_message_link(chat_id: int, message_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    normalized_id = normalize_chat_id(chat_id)
    chat_info = tracked_chats.get(normalized_id, {})
    username = chat_info.get("username", "")
    
    if username:
        return f"https://t.me/{username}/{message_id}"

    else:
        # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
        return f"https://t.me/c/{abs(normalized_id)}/{message_id}" if normalized_id < 0 else f"https://t.me/c/{normalized_id}/{message_id}"

def format_user_html(user) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ HTML"""
    first_name = (
        getattr(user, 'first_name', '')
        or getattr(user, 'title', '')
        or "Unknown"
    )
    username = getattr(user, 'username', None)
    escaped_name = html.escape(first_name)

    if username:
        return f'<a href="https://t.me/{html.escape(username)}">{escaped_name}</a>'

    return escaped_name


# ====================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ====================== #

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return     
    welcome_text = (
        "üîç <b>–ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ Telegram</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/add_chat - –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/remove_chat - –£–¥–∞–ª–∏—Ç—å —á–∞—Ç\n"
        "/add_keywords - –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        "/remove_keywords - –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —á–∞—Ç—ã\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"

    )
    await message.answer(welcome_text, parse_mode=ParseMode.HTML)

@dp.message(Command("add_chat"))
async def cmd_add_chat(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç: /add_chat @username")
        return
    
    try:
        ref = args[1].strip()
        entity = await userbot.get_entity(ref)

        if not isinstance(entity, Channel):
            await message.answer("–≠—Ç–æ –Ω–µ —á–∞—Ç/–∫–∞–Ω–∞–ª!")
            return
        
        chat_id = entity.id
        title = entity.title
        username = getattr(entity, 'username', None) or ""

        await add_chat(chat_id, title, username)
        normalized_id = normalize_chat_id(chat_id)

        await message.answer(
            f"‚úÖ –ß–∞—Ç <b>{html.escape(title)}</b> –¥–æ–±–∞–≤–ª–µ–Ω\n"
            f"–ò—Å—Ö–æ–¥–Ω—ã–π ID: <code>{chat_id}</code>\n"
            f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID: <code>{normalized_id}</code>\n"
            f"Username: @{username if username else 'N/A'}",
            parse_mode=ParseMode.HTML

        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")

@dp.message(Command("remove_chat"))
async def cmd_remove_chat(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    args = message.text.split(maxsplit=1)
    
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞: /remove_chat 123456789")
        return

    try:
        chat_id = int(args[1])
        normalized_id = normalize_chat_id(chat_id)

        if normalized_id in tracked_chats:
            title = tracked_chats[normalized_id]["title"]
            await remove_chat(chat_id)
            await message.answer(f"‚ùå –ß–∞—Ç <b>{html.escape(title)}</b> —É–¥–∞–ª–µ–Ω", 
                               parse_mode=ParseMode.HTML)
        else:
            await message.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")

@dp.message(Command("add_keywords"))
async def cmd_add_keywords(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_keywords <chat_id> <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é>")
        return

    try:
        chat_id = int(args[1])
        keywords = [k.strip() for k in args[2].split(",") if k.strip()]
        normalized_id = normalize_chat_id(chat_id)

        if normalized_id not in tracked_chats:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á–∞—Ç —Å –ø–æ–º–æ—â—å—é /add_chat")
            return

        await add_keywords(chat_id, keywords)
        await message.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —á–∞—Ç ID: <code>{normalized_id}</code>",
            parse_mode=ParseMode.HTML
        )

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")

@dp.message(Command("remove_keywords"))
async def cmd_remove_keywords(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    args = message.text.split(maxsplit=2)
    
    if len(args) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_keywords <chat_id> <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é>")
        return

    try:
        chat_id = int(args[1])
        keywords = [k.strip() for k in args[2].split(",") if k.strip()]
        normalized_id = normalize_chat_id(chat_id)
        
        if normalized_id not in tracked_chats:
            await message.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        await remove_keywords(chat_id, keywords)
        await message.answer(f"–£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(keywords)} –∏–∑ —á–∞—Ç–∞ ID: <code>{normalized_id}</code>", parse_mode=ParseMode.HTML)

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")



@dp.message(Command("list"))
async def cmd_list(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    if not tracked_chats:
        await message.answer("–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤")
        return

    response = ["üìã <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —á–∞—Ç—ã:</b>"]

    for chat_id, chat_info in tracked_chats.items():
        keywords = []
        if chat_info["pattern"]:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ regex
            pattern_str = chat_info["pattern"].pattern
            keywords = [

                kw.strip('()\\b').replace(r'\\', '') for kw in pattern_str.split('|')

            ] if pattern_str else []

        response.append(
            f"\n‚Ä¢ <b>{html.escape(chat_info['title'])}</b>\n"
            f"ID: <code>{chat_id}</code>\n"
            f"Username: @{chat_info.get('username', '')}\n"
            f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n" + "\n".join(f"- {kw}" for kw in keywords) if keywords else "- –Ω–µ—Ç"
        )

    await message.answer('\n'.join(response), parse_mode=ParseMode.HTML)

# ====================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ====================== #

@userbot.on(events.NewMessage)
async def handle_new_message(event):
    """–ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    normalized_chat_id = normalize_chat_id(event.chat_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —á–∞—Ç
    if normalized_chat_id in tracked_chats:
        pending_messages.append((normalized_chat_id, event))

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
    if len(pending_messages) >= BATCH_SIZE:
        await process_message_batch()

async def process_message_batch():
    """–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global pending_messages
    if not pending_messages:
        return
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    tasks = []
    for normalized_chat_id, event in pending_messages[:BATCH_SIZE]:
        tasks.append(process_message(normalized_chat_id, event))

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    await asyncio.gather(*tasks)
    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    pending_messages = pending_messages[BATCH_SIZE:]


async def process_message(normalized_chat_id: int, event):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    chat_info = tracked_chats.get(normalized_chat_id)

    if not chat_info or not chat_info["pattern"] or not event.message.text:
        return
    
    # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ regex
    text = event.message.text.lower()
    matches = chat_info["pattern"].findall(text)

    if not matches:
        return

    found_keywords = set(matches)
    logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —á–∞—Ç–µ {normalized_chat_id}: {found_keywords}")

    try:
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫
        message_link = await format_message_link(normalized_chat_id, event.message.id)
        chat_link = f"https://t.me/{chat_info['username']}" if chat_info.get("username") else ""

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–µ
        sender = await event.get_sender()
        author_html = format_user_html(sender)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é", url=message_link)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_html = (
            f"<b>üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ!</b>\n\n"
            f"<b>–ß–∞—Ç:</b> <a href='{chat_link}'>{html.escape(chat_info['title'])}</a>\n"
            f"<b>ID:</b> <code>{normalized_chat_id}</code>\n"
            f"<b>–ê–≤—Ç–æ—Ä:</b> {author_html}\n"
            f"<b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {', '.join(found_keywords)}\n\n"
            f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<code>{html.escape(event.message.text[:800])}</code>"
        )

        await bot.send_message(
            chat_id=ADMIN_ID,
            text=notification_html,
            parse_mode=ParseMode.HTML,
            reply_markup=builder.as_markup(),
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}", exc_info=True)


# ====================== –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ====================== #

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    await load_tracked_data()

    # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    await userbot.start()
    logger.info("Userbot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π

    async def process_pending():
        while True:
            if pending_messages:
                await process_message_batch()
            await asyncio.sleep(1)
            
    asyncio.create_task(process_pending())
    await dp.start_polling(bot)
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())